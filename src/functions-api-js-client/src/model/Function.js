/**
 * Swagger Functions Store - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Function model module.
 * @module model/Function
 * @version 0.0.1
 */
class Function {
    /**
     * Constructs a new <code>Function</code>.
     * @alias module:model/Function
     * @param name {String} 
     * @param type {String} 
     * @param url {String} 
     * @param description {String} 
     */
    constructor(name, type, url, description) { 
        
        Function.initialize(this, name, type, url, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, url, description) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['url'] = url;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>Function</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Function} obj Optional instance to populate.
     * @return {module:model/Function} The populated <code>Function</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Function();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('input_schema')) {
                obj['input_schema'] = ApiClient.convertToType(data['input_schema'], Object);
            }
            if (data.hasOwnProperty('output_schema')) {
                obj['output_schema'] = ApiClient.convertToType(data['output_schema'], Object);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Function</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Function</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Function.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

Function.RequiredProperties = ["name", "type", "url", "description"];

/**
 * @member {Number} id
 */
Function.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Function.prototype['name'] = undefined;

/**
 * @member {String} type
 */
Function.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Function.prototype['url'] = undefined;

/**
 * @member {String} description
 */
Function.prototype['description'] = undefined;

/**
 * @member {Object} input_schema
 */
Function.prototype['input_schema'] = undefined;

/**
 * @member {Object} output_schema
 */
Function.prototype['output_schema'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Function.prototype['tags'] = undefined;






export default Function;

