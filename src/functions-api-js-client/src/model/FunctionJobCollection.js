/**
 * Swagger Functions Store - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FunctionJobCollection model module.
 * @module model/FunctionJobCollection
 * @version 0.0.1
 */
class FunctionJobCollection {
    /**
     * Constructs a new <code>FunctionJobCollection</code>.
     * Model for a collection of function jobs
     * @alias module:model/FunctionJobCollection
     * @param id {Number} 
     * @param name {String} 
     * @param description {String} 
     * @param jobIds {Array.<Number>} 
     * @param status {String} 
     */
    constructor(id, name, description, jobIds, status) { 
        
        FunctionJobCollection.initialize(this, id, name, description, jobIds, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, description, jobIds, status) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['description'] = description;
        obj['job_ids'] = jobIds;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>FunctionJobCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FunctionJobCollection} obj Optional instance to populate.
     * @return {module:model/FunctionJobCollection} The populated <code>FunctionJobCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FunctionJobCollection();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('job_ids')) {
                obj['job_ids'] = ApiClient.convertToType(data['job_ids'], ['Number']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FunctionJobCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FunctionJobCollection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FunctionJobCollection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['job_ids'])) {
            throw new Error("Expected the field `job_ids` to be an array in the JSON data but got " + data['job_ids']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

FunctionJobCollection.RequiredProperties = ["id", "name", "description", "job_ids", "status"];

/**
 * @member {Number} id
 */
FunctionJobCollection.prototype['id'] = undefined;

/**
 * @member {String} name
 */
FunctionJobCollection.prototype['name'] = undefined;

/**
 * @member {String} description
 */
FunctionJobCollection.prototype['description'] = undefined;

/**
 * @member {Array.<Number>} job_ids
 */
FunctionJobCollection.prototype['job_ids'] = undefined;

/**
 * @member {String} status
 */
FunctionJobCollection.prototype['status'] = undefined;






export default FunctionJobCollection;

