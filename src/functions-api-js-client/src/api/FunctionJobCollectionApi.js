/**
 * Swagger Functions Store - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FunctionJobCollection from '../model/FunctionJobCollection';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* FunctionJobCollection service.
* @module api/FunctionJobCollectionApi
* @version 0.0.1
*/
export default class FunctionJobCollectionApi {

    /**
    * Constructs a new FunctionJobCollectionApi. 
    * @alias module:api/FunctionJobCollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFunctionJobCollection operation.
     * @callback module:api/FunctionJobCollectionApi~createFunctionJobCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Function Job Collection
     * Create a new function job collection.  Parameters:     collection: Collection details including name and optional description  Returns:     Created function job collection
     * @param {module:model/FunctionJobCollection} functionJobCollection 
     * @param {module:api/FunctionJobCollectionApi~createFunctionJobCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionJobCollection}
     */
    createFunctionJobCollection(functionJobCollection, callback) {
      let postBody = functionJobCollection;
      // verify the required parameter 'functionJobCollection' is set
      if (functionJobCollection === undefined || functionJobCollection === null) {
        throw new Error("Missing the required parameter 'functionJobCollection' when calling createFunctionJobCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionJobCollection;
      return this.apiClient.callApi(
        '/functionJobCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionStatus operation.
     * @callback module:api/FunctionJobCollectionApi~getCollectionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Collection Status
     * Get status of a function job collection.  Parameters:     collection_id: ID of the collection to check  Returns:     Collection details including current status of all jobs
     * @param {Number} collectionId 
     * @param {module:api/FunctionJobCollectionApi~getCollectionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionJobCollection}
     */
    getCollectionStatus(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionStatus");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionJobCollection;
      return this.apiClient.callApi(
        '/functionJobCollection/{collection_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFunctionJobCollections operation.
     * @callback module:api/FunctionJobCollectionApi~listFunctionJobCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionJobCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Function Job Collections
     * List all function job collections.  Returns:     List of all function job collections
     * @param {module:api/FunctionJobCollectionApi~listFunctionJobCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionJobCollection>}
     */
    listFunctionJobCollections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FunctionJobCollection];
      return this.apiClient.callApi(
        '/functionJobCollection/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
