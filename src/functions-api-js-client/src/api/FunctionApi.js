/**
 * Swagger Functions Store - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Function from '../model/Function';
import FunctionJob from '../model/FunctionJob';
import FunctionJobCollection from '../model/FunctionJobCollection';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Function service.
* @module api/FunctionApi
* @version 0.0.1
*/
export default class FunctionApi {

    /**
    * Constructs a new FunctionApi. 
    * @alias module:api/FunctionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchRunFunction operation.
     * @callback module:api/FunctionApi~batchRunFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionJobCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch Run Function
     * Run a function with multiple inputs and create a job collection.  Parameters:     function_id: ID of the function to run     collection_name: Name for the job collection     request_body: List of JSON strings containing input parameters     max_workers: Optional maximum number of parallel workers  Returns:     Created function job collection containing all job IDs
     * @param {Number} functionId 
     * @param {String} collectionName 
     * @param {Array.<String>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWorkers] 
     * @param {module:api/FunctionApi~batchRunFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionJobCollection}
     */
    batchRunFunction(functionId, collectionName, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling batchRunFunction");
      }
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling batchRunFunction");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling batchRunFunction");
      }

      let pathParams = {
        'function_id': functionId
      };
      let queryParams = {
        'collection_name': collectionName,
        'max_workers': opts['maxWorkers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionJobCollection;
      return this.apiClient.callApi(
        '/function/{function_id}/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFunction operation.
     * @callback module:api/FunctionApi~createFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Function
     * Create a new function with optional JSON Schema definitions for input and output. Validates that provided schemas are valid JSON Schema. Supports tags for better organization and searchability.
     * @param {module:model/Function} _function 
     * @param {module:api/FunctionApi~createFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    createFunction(_function, callback) {
      let postBody = _function;
      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling createFunction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/function', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllFunctions operation.
     * @callback module:api/FunctionApi~deleteAllFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Functions
     * Delete all functions from the store.  Returns:     Message confirming deletion with count of deleted functions
     * @param {module:api/FunctionApi~deleteAllFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAllFunctions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/function/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFunctions operation.
     * @callback module:api/FunctionApi~listFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Function>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Functions
     * List all functions in the store.  Returns:     List of all registered functions
     * @param {module:api/FunctionApi~listFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Function>}
     */
    listFunctions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Function];
      return this.apiClient.callApi(
        '/function/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapFunction operation.
     * @callback module:api/FunctionApi~mapFunctionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map Function
     * Start asynchronous processing of multiple inputs with schema validation.
     * @param {Number} functionId 
     * @param {Array.<String>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxWorkers] 
     * @param {module:api/FunctionApi~mapFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionJob>}
     */
    mapFunction(functionId, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling mapFunction");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling mapFunction");
      }

      let pathParams = {
        'function_id': functionId
      };
      let queryParams = {
        'max_workers': opts['maxWorkers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [FunctionJob];
      return this.apiClient.callApi(
        '/function/{function_id}/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runFunction operation.
     * @callback module:api/FunctionApi~runFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Function
     * Run a function with the given inputs. Validates inputs and outputs against JSON Schema if defined.
     * @param {Number} functionId 
     * @param {String} inputs 
     * @param {module:api/FunctionApi~runFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionJob}
     */
    runFunction(functionId, inputs, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling runFunction");
      }
      // verify the required parameter 'inputs' is set
      if (inputs === undefined || inputs === null) {
        throw new Error("Missing the required parameter 'inputs' when calling runFunction");
      }

      let pathParams = {
        'function_id': functionId
      };
      let queryParams = {
        'inputs': inputs
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionJob;
      return this.apiClient.callApi(
        '/function/{function_id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFunctionsByName operation.
     * @callback module:api/FunctionApi~searchFunctionsByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Function>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Functions By Name
     * Search for functions by name.  Parameters:     name: String to search for in function names (case-sensitive partial match)  Returns:     List of functions whose names contain the search string
     * @param {String} name 
     * @param {module:api/FunctionApi~searchFunctionsByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Function>}
     */
    searchFunctionsByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling searchFunctionsByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Function];
      return this.apiClient.callApi(
        '/function/searchByName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFunctionsByTags operation.
     * @callback module:api/FunctionApi~searchFunctionsByTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Function>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Functions By Tags
     * Search for functions by tags.  Parameters:     tags: List of tags to search for     match_all: If True, functions must have all specified tags. If False, functions must have any of the specified tags.  Returns:     List of functions that match the tag criteria
     * @param {Array.<String>} tags Tags to search for
     * @param {Object} opts Optional parameters
     * @param {Boolean} [matchAll = false)] If True, functions must have all tags. If False, functions must have any of the tags.
     * @param {module:api/FunctionApi~searchFunctionsByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Function>}
     */
    searchFunctionsByTags(tags, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling searchFunctionsByTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(tags, 'multi'),
        'match_all': opts['matchAll']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Function];
      return this.apiClient.callApi(
        '/function/searchByTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFunctionConfigFunctionConfigPost operation.
     * @callback module:api/FunctionApi~updateFunctionConfigFunctionConfigPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Function Config
     * Update function execution configuration settings.  Parameters:     max_parallel_jobs: Maximum number of parallel jobs allowed (default: 10)  Returns:     Updated configuration settings
     * @param {Object} opts Optional parameters
     * @param {Number} [maxParallelJobs = 10)] 
     * @param {module:api/FunctionApi~updateFunctionConfigFunctionConfigPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFunctionConfigFunctionConfigPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_parallel_jobs': opts['maxParallelJobs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/function/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
