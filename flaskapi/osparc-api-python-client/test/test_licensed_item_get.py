# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.7.1.post0.dev0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from osparc_client.models.licensed_item_get import LicensedItemGet

class TestLicensedItemGet(unittest.TestCase):
    """LicensedItemGet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LicensedItemGet:
        """Test LicensedItemGet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LicensedItemGet`
        """
        model = LicensedItemGet()
        if include_optional:
            return LicensedItemGet(
                licensed_item_id = '',
                key = '',
                version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026',
                display_name = '',
                licensed_resource_type = 'VIP_MODEL',
                licensed_resources = [
                    osparc_client.models.licensed_resource.LicensedResource(
                        source = osparc_client.models.licensed_resource_source.LicensedResourceSource(
                            id = 56, 
                            description = '', 
                            thumbnail = '', 
                            features = osparc_client.models.licensed_resource_source_features_dict.LicensedResourceSourceFeaturesDict(
                                age = '', 
                                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                ethnicity = '', 
                                functionality = '', 
                                height = '', 
                                name = '', 
                                sex = '', 
                                species = '', 
                                version = '', 
                                weight = '', ), 
                            doi = '', 
                            license_key = '', 
                            license_version = '', 
                            protection = 'Code', 
                            available_from_url = '0', ), 
                        category_id = '0', 
                        category_display = '', 
                        terms_of_use_url = '0', )
                    ],
                pricing_plan_id = 0,
                is_hidden_on_market = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return LicensedItemGet(
                licensed_item_id = '',
                key = '',
                version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026',
                display_name = '',
                licensed_resource_type = 'VIP_MODEL',
                licensed_resources = [
                    osparc_client.models.licensed_resource.LicensedResource(
                        source = osparc_client.models.licensed_resource_source.LicensedResourceSource(
                            id = 56, 
                            description = '', 
                            thumbnail = '', 
                            features = osparc_client.models.licensed_resource_source_features_dict.LicensedResourceSourceFeaturesDict(
                                age = '', 
                                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                ethnicity = '', 
                                functionality = '', 
                                height = '', 
                                name = '', 
                                sex = '', 
                                species = '', 
                                version = '', 
                                weight = '', ), 
                            doi = '', 
                            license_key = '', 
                            license_version = '', 
                            protection = 'Code', 
                            available_from_url = '0', ), 
                        category_id = '0', 
                        category_display = '', 
                        terms_of_use_url = '0', )
                    ],
                pricing_plan_id = 0,
                is_hidden_on_market = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testLicensedItemGet(self):
        """Test LicensedItemGet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
