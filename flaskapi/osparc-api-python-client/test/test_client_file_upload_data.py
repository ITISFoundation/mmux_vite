# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications

    The version of the OpenAPI document: 0.7.1.post0.dev0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from osparc_client.models.client_file_upload_data import ClientFileUploadData

class TestClientFileUploadData(unittest.TestCase):
    """ClientFileUploadData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClientFileUploadData:
        """Test ClientFileUploadData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClientFileUploadData`
        """
        model = ClientFileUploadData()
        if include_optional:
            return ClientFileUploadData(
                file_id = '',
                upload_schema = osparc_client.models.file_upload_data.FileUploadData(
                    chunk_size = 0, 
                    urls = [
                        '0'
                        ], 
                    links = osparc_client.models.upload_links.UploadLinks(
                        abort_upload = '', 
                        complete_upload = '', ), )
            )
        else:
            return ClientFileUploadData(
                file_id = '',
                upload_schema = osparc_client.models.file_upload_data.FileUploadData(
                    chunk_size = 0, 
                    urls = [
                        '0'
                        ], 
                    links = osparc_client.models.upload_links.UploadLinks(
                        abort_upload = '', 
                        complete_upload = '', ), ),
        )
        """

    def testClientFileUploadData(self):
        """Test ClientFileUploadData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
